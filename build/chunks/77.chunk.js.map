{"version":3,"sources":["webpack:///./src/components/ContentEditLinkModal/ContentEditLinkModal.js","webpack:///./src/components/ContentEditLinkModal/ContentEditLinkModalContainer.js","webpack:///./src/components/ContentEditLinkModal/index.js"],"names":["ContentEditLinkModal","_ref","closeModal","addLinkHandler","existingLink","_useState2","_slicedToArray","useState","url","setURL","t","useTranslation","addURLLink","React","createElement","DataElementWrapper","className","data-element","DataElements","CONTENT_EDIT_LINK_MODAL","onMouseDown","e","stopPropagation","onSubmit","value","autoFocus","onChange","target","Button","dataElement","label","onClick","ContentEditLinkModalContainer","_useSelector2","useSelector","state","selectors","isElementOpen","getContentBoxEditor","isOpen","contentBoxEditor","dispatch","useDispatch","existingLinkUrl","hyperlink","useCallback","actions","closeElement","blur","addLink","insertHyperlink"],"mappings":"gxCAQA,IAyCeA,EAzCc,SAAHC,GAIpB,IAHJC,EAAUD,EAAVC,WACAC,EAAcF,EAAdE,eACAC,EAAYH,EAAZG,aAE4CC,EAAAC,EAAtBC,mBAASH,GAAa,GAArCI,EAAGH,EAAA,GAAEI,EAAMJ,EAAA,GACXK,EAAqBJ,EAAhBK,cAAgB,GAApB,GAEFC,EAAa,WACjBT,EAAeK,GACfN,KAGF,OACEW,IAAAC,cAACC,IAAkB,CACjBC,UAAU,kBACVC,eAAcC,IAAaC,wBAC3BC,YAAalB,GAEbW,IAAAC,cAAA,OAAKE,UAAU,YAAYI,YAAa,SAACC,GAAC,OAAKA,EAAEC,oBAC/CT,IAAAC,cAAA,QAAMS,SAAUX,GACdC,IAAAC,cAAA,WAAMJ,EAAE,kBACRG,IAAAC,cAAA,OAAKE,UAAU,aACbH,IAAAC,cAAA,SACEE,UAAU,WACVQ,MAAOhB,EACPiB,WAAS,EACTC,SAAU,SAACL,GAAC,OAAKZ,EAAOY,EAAEM,OAAOH,UAEnCX,IAAAC,cAACc,IAAM,CACLC,YAAY,mBACZC,MAAOpB,EAAE,eACTqB,QAASnB,S,ojCCjCvB,IAiCeoB,EAjCuB,WACpC,IAMEC,EAAA3B,EAHE4B,aAAY,SAACC,GAAK,MAAK,CACzBC,IAAUC,cAAcF,EAAOjB,IAAaC,yBAC5CiB,IAAUE,oBAAoBH,OAC9B,GALAI,EAAMN,EAAA,GACNO,EAAgBP,EAAA,GAMZQ,EAAWC,cAEbC,EAAkB,GAClBH,IACFG,EAAkBH,EAAiBI,WAGrC,IAAM1C,EAAa2C,uBAAY,WAC7BJ,EAASK,IAAQC,aAAa7B,IAAaC,0BACvCqB,GACFA,EAAiBQ,SAElB,CAACR,IAEES,EAAUJ,uBAAY,SAACrC,GACvBgC,IACFA,EAAiBU,gBAAgB1C,GACjCgC,EAAiBQ,UAElB,CAACR,IAEJ,OAAOD,EAAU1B,IAAAC,cAACd,EAAoB,CAACE,WAAYA,EAAYC,eAAgB8C,EAAS7C,aAAcuC,IAAuB,MCnChH3C","file":"chunks/77.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Button from 'components/Button';\nimport DataElements from 'constants/dataElement';\nimport DataElementWrapper from 'components/DataElementWrapper';\n\nimport '../LinkModal/LinkModal.scss';\n\nconst ContentEditLinkModal = ({\n  closeModal,\n  addLinkHandler,\n  existingLink,\n}) => {\n  const [url, setURL] = useState(existingLink);\n  const [t] = useTranslation();\n\n  const addURLLink = () => {\n    addLinkHandler(url);\n    closeModal();\n  };\n\n  return (\n    <DataElementWrapper\n      className=\"Modal LinkModal\"\n      data-element={DataElements.CONTENT_EDIT_LINK_MODAL}\n      onMouseDown={closeModal}\n    >\n      <div className=\"container\" onMouseDown={(e) => e.stopPropagation()}>\n        <form onSubmit={addURLLink}>\n          <div>{t('link.enterurl')}</div>\n          <div className=\"linkInput\">\n            <input\n              className=\"urlInput\"\n              value={url}\n              autoFocus\n              onChange={(e) => setURL(e.target.value)}\n            />\n            <Button\n              dataElement=\"linkSubmitButton\"\n              label={t('action.link')}\n              onClick={addURLLink}\n            />\n          </div>\n        </form>\n      </div>\n    </DataElementWrapper>\n  );\n};\n\nexport default ContentEditLinkModal;","import React, { useCallback } from 'react';\nimport ContentEditLinkModal from './ContentEditLinkModal';\nimport selectors from 'selectors';\nimport DataElements from 'constants/dataElement';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from 'src/redux/actions';\n\nconst ContentEditLinkModalContainer = () => {\n  const [\n    isOpen,\n    contentBoxEditor,\n  ] = useSelector((state) => [\n    selectors.isElementOpen(state, DataElements.CONTENT_EDIT_LINK_MODAL),\n    selectors.getContentBoxEditor(state),\n  ]);\n\n  const dispatch = useDispatch();\n\n  let existingLinkUrl = '';\n  if (contentBoxEditor) {\n    existingLinkUrl = contentBoxEditor.hyperlink;\n  }\n\n  const closeModal = useCallback(() => {\n    dispatch(actions.closeElement(DataElements.CONTENT_EDIT_LINK_MODAL));\n    if (contentBoxEditor) {\n      contentBoxEditor.blur();\n    }\n  }, [contentBoxEditor]);\n\n  const addLink = useCallback((url) => {\n    if (contentBoxEditor) {\n      contentBoxEditor.insertHyperlink(url);\n      contentBoxEditor.blur();\n    }\n  }, [contentBoxEditor]);\n\n  return isOpen ? (<ContentEditLinkModal closeModal={closeModal} addLinkHandler={addLink} existingLink={existingLinkUrl} />) : null;\n};\n\nexport default ContentEditLinkModalContainer;","import ContentEditLinkModal from './ContentEditLinkModalContainer';\n\nexport default ContentEditLinkModal;"],"sourceRoot":""}